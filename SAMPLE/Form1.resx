<?xml version="1.0" encoding="utf-8"?>
<root>
  <!--
    Microsoft ResX Schema 

    Version 2.0

    The primary goals of this format is to allow a simple XML format
    that is mostly human readable. The generation and parsing of the
    various data types are done through the TypeConverter classes
    associated with the data types.

    Example:

    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>

    There are any number of "resheader" rows that contain simple
    name/value pairs.

    Each data row contains a name, and value. The row also contains a
    type or mimetype. Type corresponds to a .NET class that support
    text/value conversion through the TypeConverter architecture.
    Classes that don't support this are serialized and stored with the
    mimetype set.

    The mimetype is used for serialized objects, and tells the
    ResXResourceReader how to depersist the object. This is currently not
    extensible. For a given mimetype the value must be set accordingly:

    Note - application/x-microsoft.net.object.binary.base64 is the format
    that the ResXResourceWriter will generate, however the reader can
    read any of the formats listed below.

    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:import namespace="http://www.w3.org/XML/1998/namespace" />
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" use="required" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <metadata name="menuStrip1.TrayLocation" type="System.Drawing.Point, System.Drawing, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a">
    <value>17, 17</value>
  </metadata>
  <assembly alias="System.Drawing" name="System.Drawing, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a" />
  <data name="$this.Icon" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
    <value>
        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
</value>
  </data>
</root>